mkdir express-auth 
cd express-auth
touch README.md
git init && git add . && git commit -m "..."
touch .gitignore
npm init -y

code . >> (configure .gitignore)

create 'views' folder
    index.ejs
    layout.ejs
    profile.ejs

    '/auth' folder
        login.ejs
        register.ejs


npm install dotenv
npm install express
npm install ejs
npm install express-ejs-layouts
npm install morgan
npm install helmet
npm install express-session
npm install flash

create 'models' folder
    index.js
    user.js


npm install passport
npm install passport-local
npm install pg
npm install sequelize

========================================
========================================



<% characters.forEach(function(character) { %>
<div>
    <%= character.name %>
</div>
<% }) %>


<% characters.forEach(function(character) { %>
    <% if (character.hair || character.name == 'Gollum') { %>
        <div class="characters">
            <a href="<%= character._id %>"></a><%= character.name %>
            <span><a href="<%= character.wikiUrl %>">(wiki)</a></span>
        </div>
    <% } %>
<% }) %>

========================================
========================================

let pageNum = req.query.page
let lower = (pageNum * resultsPerPage) - resultsPerPage
let upper = lower + resultsPerPage;

<% for (let i = lower; i < upper; i++) { %>
    <div>
        <%= characters[i].name %>
    </div>
<% } %>


characters.forEach( (element, index) => {
    if (index > 0 && index < 100)
    element.name
})



<% let filteredArray = characters.filter(function(character) { %>
    <% return character.name.length == 4 %>
<% }) %>

<% filteredArray.forEach(element => { %>
    <div>
        <%= element.name %>
    </div>
<% }) %>



// pagination

// const itemCount = results.data.docs.length
        // const resultsPerPage = 100;
        // console.log(itemCount)
        // const pageCount = Math.ceil(results.data.docs.length / resultsPerPage);


        // console.log(req.query.page)
        //     pageCount,
        //     itemCount,
        //     resultsPerPage,
        //     pages: paginate.getArrayPages(req)(3, pageCount, req.query.page)



========================================
========================================

// MODELS

teammate
--------
name: string (name from API)
charId: string (id from API)
teamId: integer (is this necessary?)

sequelize model:create --name teammate --attributes name:string,charId:string,teamId:integer


team
----
comment: text
name: string
userId: integer

sequelize model:create --name team --attributes comment:text,name:string,userId:integer


========================================
========================================

// SHOW PAGE

character's {
    name
    random quote
    gender
    birth
    height
    hair
    spouse
    death
    wiki
    
    ADD TO TEAM
    BACK TO CHARACTERS
}

// TEAM DETAILS

<% teammates.forEach(teammate => { %>
    <div>
        <h1>
            <a href="/characters/<%= teammate.charId %>"><%= teammate.name %></a>
        </h1>
    </div>
<% }) %>


router.get('/', (req, res) => {
    db.teammate.findAll()
    .then(teammates => {
        res.render('team', {
            teammates
        })
    })
})

router.post('/', (req, res) => {
    db.teammate.findOrCreate({
        where: {
            charId: req.body.charId
        },
        defaults: {
            name: req.body.name,
            charId: req.body.charId
        }
    })
    .then(([teammate, created]) => {
        res.redirect('/team')
    })
})


========================================
========================================


<% if (user.dataValues.teams[0] && user.dataValues.teams[0].comment) {%>
<% } %>